1. Primero realizar un fetch origin.
2. git diff master origin/master (dependiendo de la rama a comparar origin/[nombreRama]).
3. git status si el repositorio local esta por detras del repositorio remoto realizar un git pull origin master.
4. indicar en que se va a trabajar (archivo) y al terminar archivar actividades en kanban jira o whiteboard.
5. identificar una actividad principal y subdividir en tareas.
6. una vez completada una tarea realizar un commit que este bien redactado el comentario.
7. commit para cada actividad, tarea o funcion que se realice.
8. no utilizar git add . para actualizar el repositorio remoto.
9. al final hace README.
10. recordar guardar cambios antes de hacer commit.

#comandos basicos

git status 
git add [nombre archivo]
git diff [nombre archivo]
git commit -m ["descripcion del mensaje"]
git pull
git push -u origin master (solo la primera vez despues solo git push)
git fetch origin -> solicitud al remoto / actualizar la informacion del repositorio remoto
git diff master origin/master -> muestra las diferencias entre el local con el remoto (repositorio)
git diff [rama] origin/[rama]Â [nombreArchivo]
git log

#script

npm run dev

#conventional commits

<tipo>(alcance opcional):<descripcion>

ejemplo: feat(parser): add ability to parse arrays

tipos fix, feat, build, chore, ci, docs, style, refactor, perf, test...

ejemplo revirtiendo
revert: let us never again speak of the noodle incident
Refs: 676104e, a215868

relacionado con
fix: correccion bug
feat: nueva funcionalidad
build: relacionado con el empaquetador
chore: actulizaciones que no impactan ej: conf de librerias de terceros
ci: config relacionadas con github
docs: documentacion
style: stylos ui
refactor: refactorizacion
perf: performance
test: testing nuevos o correcciones
env: configuraciones globales .env